#include "module_ground_station.h"
#define _USE_MATH_DEFINES
#include <cmath>
#include <iostream>
#include <functional>

#include <QApplication>
#include <QString>
#include <QDataStream>

#include "mace_core/module_factory.h"

class ServerThread : public QThread
{
public:
    ServerThread(const std::function<void(void)> &func):
        m_func(func)
    {
        if(QCoreApplication::instance() == NULL)
        {
            int argc = 0;
            char * argv[] = {(char *)"sharedlib.app"};
            pApp = new QCoreApplication(argc, argv);
        }
    }

    virtual void run()
    {
        while(true)
        {
            QCoreApplication::processEvents();
            m_func();
        }
    }

private:

    std::function<void(void)> m_func;
    QCoreApplication *pApp;
};

ModuleGroundStation::ModuleGroundStation() :
    m_SensorDataTopic("sensorData"),
    m_SensorFootprintDataTopic("sensorFootprint"),
    m_VehicleDataTopic("vehicleData"),
    m_MissionDataTopic("vehicleMission"),
    m_ListenThread(NULL)
{
    m_positionTimeoutOccured = false;
    m_attitudeTimeoutOccured = false;
    m_modeTimeoutOccured = false;
    m_fuelTimeoutOccured = false;
    // Start timer:
    m_timer = std::make_shared<GUITimer>([=]()
    {
        m_positionTimeoutOccured = true;
        m_attitudeTimeoutOccured = true;
        m_modeTimeoutOccured = true;
        m_fuelTimeoutOccured = true;
    });

    m_timer->setSingleShot(false);
    m_timer->setInterval(GUITimer::Interval(1000));
    m_timer->start(true);
}

ModuleGroundStation::~ModuleGroundStation()
{
    if(m_ListenThread != NULL)
    {
        delete m_ListenThread;
    }

    if(m_timer)
    {
        m_timer->stop();
    }
}

bool ModuleGroundStation::StartTCPServer()
{
    m_TcpServer = std::make_shared<QTcpServer>();
    m_ListenThread = new ServerThread([&](){
        if(m_TcpServer->hasPendingConnections())
            this->on_newConnection();
    });

    m_TcpServer->listen(QHostAddress::LocalHost, 5678);

    m_TcpServer->moveToThread(m_ListenThread);
    m_ListenThread->start();


    if(!m_TcpServer->isListening())
    {
        std::cout << "Server could not start..." << std::endl;
    }
    else
    {
        std::cout << "GUI TCP Server started" << std::endl;
    }

    return m_TcpServer->isListening();
}

void ModuleGroundStation::on_newConnection()
{
    while (m_TcpServer->hasPendingConnections())
    {
        QTcpSocket *socket = m_TcpServer->nextPendingConnection();
        while (socket->waitForReadyRead())
        {
            QByteArray data = socket->readAll();

            std::cout << "Incoming data: " << data.toStdString() << std::endl;

            QJsonObject jsonObj;
            QJsonDocument doc = QJsonDocument::fromJson(data);
            // check validity of the document
            if(!doc.isNull())
            {
                if(doc.isObject())
                {
                    jsonObj = doc.object();
                    parseTCPRequest(jsonObj);
                }
                else
                {
                    std::cout << "Command is not a valid JSON object." << std::endl;
                    socket->close();
                    return;
                }
            }
            else
            {
                std::cout << "Invalid JSON..." << std::endl;
                std::cout << data.toStdString() << std::endl;
                socket->close();
                return;
            }

            QByteArray returnData("CommandSeen");
            socket->write(returnData);
            socket->flush();
            socket->waitForBytesWritten(3000);
        }

        // TODO-PAT: Try to leave this socket open if possible??
        socket->close();
    }
}


void ModuleGroundStation::parseTCPRequest(const QJsonObject &jsonObj)
{
    QString command = jsonObj["tcpCommand"].toString();
    int vehicleID = jsonObj["vehicleID"].toInt();
    QByteArray data;
    if(command == "SET_VEHICLE_MODE")
    {
        setVehicleMode(vehicleID, jsonObj);
    }
    else if(command == "SET_VEHICLE_HOME")
    {
        setVehicleHome(vehicleID, jsonObj);
    }
    else if(command == "SET_GLOBAL_ORIGIN")
    {
        setGlobalOrigin(jsonObj);
    }
    else if(command == "SET_VEHICLE_ARM")
    {
        setVehicleArm(vehicleID, jsonObj);
    }
    else if(command == "SET_GO_HERE")
    {
        setGoHere(vehicleID, jsonObj);
    }
    else if(command == "GET_VEHICLE_MISSION")
    {
        getVehicleMission(vehicleID);
    }
    else if(command == "GET_CONNECTED_VEHICLES")
    {
        getConnectedVehicles();
    }
    else if(command == "GET_VEHICLE_HOME")
    {
        getVehicleHome(vehicleID);
    }
    else if(command == "TEST_FUNCTION1")
    {
        testFunction1(vehicleID);
    }
    else if(command == "TEST_FUNCTION2")
    {
        testFunction2(vehicleID);
    }
    else if(command == "VEHICLE_TAKEOFF")
    {
        takeoff(vehicleID, jsonObj);
    }
    else
    {
        std::cout << "Command " << command.toStdString() << " not recognized." << std::endl;
        data = "command_not_recognized";
        return;
    }
}

void ModuleGroundStation::testFunction1(const int &vehicleID)
{
    MissionItem::MissionList missionList;
    missionList.setMissionTypeState(Data::MissionTypeState::PROPOSED);
    missionList.setMissionType(Data::MissionType::AUTO);
    missionList.setVehicleID(vehicleID);
    missionList.initializeQueue(4);

    std::shared_ptr<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>> newWP = std::make_shared<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>>();
    newWP->position.setPosition(37.8910356,-76.8153602,20.0);
    newWP->setVehicleID(vehicleID);

    std::shared_ptr<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>> newWP1 = std::make_shared<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>>();
    newWP1->position.setPosition(37.8907477,-76.8152985,65.0);
    newWP1->setVehicleID(vehicleID);

    std::shared_ptr<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>> newWP2 = std::make_shared<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>>();
    newWP2->position.setPosition(37.8904852,-76.8152341,75.0);
    newWP2->setVehicleID(vehicleID);

    std::shared_ptr<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>> newWP3 = std::make_shared<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>>();
    newWP3->position.setPosition(37.8905170,-76.8144804,85.0);
    newWP3->setVehicleID(vehicleID);

    missionList.replaceMissionItemAtIndex(newWP,0);
    missionList.replaceMissionItemAtIndex(newWP1,1);
    missionList.replaceMissionItemAtIndex(newWP2,2);
    missionList.replaceMissionItemAtIndex(newWP3,3);

    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr){
        ptr->GSEvent_UploadMission(this, missionList);
    });

}

void ModuleGroundStation::testFunction2(const int &vehicleID)
{
    //    MissionItem::SpatialTakeoff<DataState::StateGlobalPosition> newTakeoff;
    //    newTakeoff.position.latitude = 37.891415;
    //    newTakeoff.position.longitude = -76.815701;
    //    newTakeoff.position.altitude = 100;
    //    newTakeoff.setVehicleID(vehicleID);

    //    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr){
    //        ptr->Event_RequestVehicleTakeoff(this, newTakeoff);
    //    });

    //    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr){
    //        ptr->Event_GetOnboardMission(this, vehicleID, Data::MissionType::AUTO);
    //    });
}

void ModuleGroundStation::getConnectedVehicles()
{
    // TODO-PAT: Instead of grabbing all vehicles, only send the one thats added to the GUI
    //          -Eventually, handle the removal of a vehicle as well.

    std::shared_ptr<const MaceCore::MaceData> data = this->getDataObject();
    std::vector<int> vehicleIDs;
    data->GetAvailableVehicles(vehicleIDs);

    QJsonArray ids;
    if(vehicleIDs.size() > 0){
        for (const int& i : vehicleIDs) {
            ids.append(i);
        }
    }
    else {
        std::cout << "No vehicles currently available" << std::endl;
    }

    QJsonObject json;
    json["dataType"] = "ConnectedVehicles";
    json["vehicleID"] = 0;
    json["connectedVehicles"] = ids;

    QJsonDocument doc(json);
    bool bytesWritten = writeTCPData(doc.toJson());

    if(!bytesWritten){
        std::cout << "Write New Vehicle Data failed..." << std::endl;
    }
}

void ModuleGroundStation::getVehicleMission(const int &vehicleID)
{
    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr){
        ptr->Event_GetCurrentMission(this, vehicleID);
    });
}

void ModuleGroundStation::getVehicleHome(const int &vehicleID)
{
    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr){
        ptr->Event_GetHomePosition(this, vehicleID);
    });
}

void ModuleGroundStation::setVehicleArm(const int &vehicleID, const QJsonObject &jsonObj)
{
    MissionItem::ActionArm tmpArm;
    tmpArm.setVehicleID(vehicleID); // the vehicle ID coordinates to the specific vehicle //vehicle 0 is reserved for all connected vehicles
    //    tmpMode.setRequestMode(jsonObj["vehicleCommand"].toString().toStdString()); //where the string here is the desired Flight Mode...available modes can be found in the appropriate topic

    QJsonObject arm = QJsonDocument::fromJson(jsonObj["vehicleCommand"].toString().toUtf8()).object();
    tmpArm.setVehicleArm(arm.value("arm").toBool());
    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr){
        ptr->Event_ArmVehicle(this, tmpArm);
    });
}

void ModuleGroundStation::setVehicleMode(const int &vehicleID, const QJsonObject &jsonObj)
{
    MissionItem::ActionChangeMode tmpMode;
    tmpMode.setVehicleID(vehicleID); // the vehicle ID coordinates to the specific vehicle //vehicle 0 is reserved for all connected vehicles
    tmpMode.setRequestMode(jsonObj["vehicleCommand"].toString().toStdString()); //where the string here is the desired Flight Mode...available modes can be found in the appropriate topic

    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr){
        ptr->Event_ChangeVehicleMode(this, tmpMode);
    });
}

void ModuleGroundStation::setVehicleHome(const int &vehicleID, const QJsonObject &jsonObj)
{
    MissionItem::SpatialHome tmpHome;
    tmpHome.setVehicleID(vehicleID);
    QJsonObject position = QJsonDocument::fromJson(jsonObj["vehicleCommand"].toString().toUtf8()).object();

    std::cout << "String Val: " << position.value("lat").toString().toStdString() << std::endl;
    std::cout << "Double Val: " << position.value("lat").toDouble() << std::endl;

    tmpHome.position.latitude = position.value("lat").toDouble();
    tmpHome.position.longitude = position.value("lon").toDouble();
    tmpHome.position.altitude = position.value("alt").toDouble();

    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr) {
        ptr->Event_SetHomePosition(this, tmpHome);
    });
}

void ModuleGroundStation::setGlobalOrigin(const QJsonObject &jsonObj)
{
    MissionItem::SpatialHome tmpGlobalOrigin;
    QJsonObject position = QJsonDocument::fromJson(jsonObj["vehicleCommand"].toString().toUtf8()).object();
    tmpGlobalOrigin.position.latitude = position.value("lat").toDouble();
    tmpGlobalOrigin.position.longitude = position.value("lon").toDouble();
    tmpGlobalOrigin.position.altitude = position.value("alt").toDouble();

    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr) {
        ptr->Event_SetGlobalOrigin(this, tmpGlobalOrigin);
    });
}

void ModuleGroundStation::setGoHere(const int &vehicleID, const QJsonObject &jsonObj)
{
    // TODO:
    std::cout << "Go here command issued" << std::endl;
}


void ModuleGroundStation::takeoff(const int &vehicleID, const QJsonObject &jsonObj)
{
    MissionItem::SpatialTakeoff<DataState::StateGlobalPosition> newTakeoff;
    QJsonObject position = QJsonDocument::fromJson(jsonObj["vehicleCommand"].toString().toUtf8()).object();
    newTakeoff.position.latitude = position.value("lat").toDouble();
    newTakeoff.position.longitude = position.value("lon").toDouble();
    newTakeoff.position.altitude = position.value("alt").toDouble();
    newTakeoff.setVehicleID(vehicleID);

    ModuleGroundStation::NotifyListeners([&](MaceCore::IModuleEventsGroundStation* ptr){
        ptr->Event_RequestVehicleTakeoff(this, newTakeoff);
    });
}


//!
//! \brief Describes the strucure of the parameters for this module
//! \return Strucure
//!
std::shared_ptr<MaceCore::ModuleParameterStructure> ModuleGroundStation::ModuleConfigurationStructure() const
{
    MaceCore::ModuleParameterStructure structure;
    return std::make_shared<MaceCore::ModuleParameterStructure>(structure);
}


//!
//! \brief Provides object contains parameters values to configure module with
//! \param params Parameters to configure
//!
void ModuleGroundStation::ConfigureModule(const std::shared_ptr<MaceCore::ModuleParameterValue> &params)
{
    UNUSED(params);
}

void ModuleGroundStation::AttachedAsModule(MaceCore::IModuleTopicEvents *ptr)
{
    ptr->Subscribe(this, m_VehicleDataTopic.Name());
    ptr->Subscribe(this, m_SensorDataTopic.Name());
    ptr->Subscribe(this, m_MissionDataTopic.Name());
    ptr->Subscribe(this, m_SensorFootprintDataTopic.Name());

}

void ModuleGroundStation::NewTopic(const std::string &topicName, int senderID, std::vector<std::string> &componentsUpdated)
{
    //example read of vehicle data
    if(topicName == m_VehicleDataTopic.Name())
    {
        //get latest datagram from mace_data
        MaceCore::TopicDatagram read_topicDatagram = this->getDataObject()->GetCurrentTopicDatagram(m_VehicleDataTopic.Name(), senderID);

        //example of how to get data and parse through the components that were updated
        for(size_t i = 0 ; i < componentsUpdated.size() ; i++) {
            if(componentsUpdated.at(i) == DataStateTopic::StateAttitudeTopic::Name()) {
                std::shared_ptr<DataStateTopic::StateAttitudeTopic> component = std::make_shared<DataStateTopic::StateAttitudeTopic>();
                m_VehicleDataTopic.GetComponent(component, read_topicDatagram);
                // Write Attitude data to the GUI:
                sendAttitudeData(senderID, component);
            }
            else if(componentsUpdated.at(i) == DataGenericItemTopic::DataGenericItemTopic_FlightMode::Name()) {
                std::shared_ptr<DataGenericItemTopic::DataGenericItemTopic_FlightMode> component = std::make_shared<DataGenericItemTopic::DataGenericItemTopic_FlightMode>();
                m_VehicleDataTopic.GetComponent(component, read_topicDatagram);

                // Write mode change to the GUI"
                sendVehicleMode(senderID, component);
            }
            else if(componentsUpdated.at(i) == DataStateTopic::StateGlobalPositionTopic::Name()) {
                std::shared_ptr<DataStateTopic::StateGlobalPositionTopic> component = std::make_shared<DataStateTopic::StateGlobalPositionTopic>();
                m_VehicleDataTopic.GetComponent(component, read_topicDatagram);

                // Write Position data to the GUI:
                sendPositionData(senderID, component);
            }
            else if(componentsUpdated.at(i) == DataGenericItemTopic::DataGenericItemTopic_Battery::Name()) {
                std::shared_ptr<DataGenericItemTopic::DataGenericItemTopic_Battery> component = std::make_shared<DataGenericItemTopic::DataGenericItemTopic_Battery>();
                m_VehicleDataTopic.GetComponent(component, read_topicDatagram);

                // Write fueld data to the GUI:
                sendVehicleFuel(senderID, component);
            }
            else if(componentsUpdated.at(i) == DataGenericItemTopic::DataGenericItemTopic_GPS::Name()) {
                // TODO
            }
            else if(componentsUpdated.at(i) == DataGenericItemTopic::DataGenericItemTopic_Text::Name()) {
                std::shared_ptr<DataGenericItemTopic::DataGenericItemTopic_Text> component = std::make_shared<DataGenericItemTopic::DataGenericItemTopic_Text>();
                m_VehicleDataTopic.GetComponent(component, read_topicDatagram);

                // Write fueld data to the GUI:
                sendVehicleText(senderID, component);
            }
        }
    }
    else if(topicName == m_MissionDataTopic.Name())
    {
        //get latest datagram from mace_data
        MaceCore::TopicDatagram read_topicDatagram = this->getDataObject()->GetCurrentTopicDatagram(m_MissionDataTopic.Name(), senderID);

        for(size_t i = 0 ; i < componentsUpdated.size() ; i++) {
            if(componentsUpdated.at(i) == MissionTopic::MissionListTopic::Name()) {
                std::shared_ptr<MissionTopic::MissionListTopic> component = std::make_shared<MissionTopic::MissionListTopic>();
                m_MissionDataTopic.GetComponent(component, read_topicDatagram);

                std::cout << "vehicle mission" << std::endl;

                // Write mission items to the GUI:
                sendVehicleMission(senderID, component->getMissionList());
            }
            else if(componentsUpdated.at(i) == MissionTopic::MissionHomeTopic::Name()) {
                std::shared_ptr<MissionTopic::MissionHomeTopic> component = std::make_shared<MissionTopic::MissionHomeTopic>();
                m_MissionDataTopic.GetComponent(component, read_topicDatagram);
                // Write mission items to the GUI:
                sendVehicleHome(senderID, component->getHome());
            }
            else if(componentsUpdated.at(i) == MissionTopic::MissionItemReachedTopic::Name()) {
                std::shared_ptr<MissionTopic::MissionItemReachedTopic> component = std::make_shared<MissionTopic::MissionItemReachedTopic>();
                m_MissionDataTopic.GetComponent(component, read_topicDatagram);
                std::cout << "I have reached a mission item" << component->getMissionItemIndex() << std::endl;
            }
            else if(componentsUpdated.at(i) == MissionTopic::MissionItemCurrentTopic::Name()) {
                std::shared_ptr<MissionTopic::MissionItemCurrentTopic> component = std::make_shared<MissionTopic::MissionItemCurrentTopic>();
                m_MissionDataTopic.GetComponent(component, read_topicDatagram);
                std::cout << "I have a new current mission item" << component->getMissionItemIndex() << std::endl;

                // Write current mission item to the GUI:
                sendCurrentMissionItem(senderID, component);
            }
        }
    }
    else if(topicName == m_SensorFootprintDataTopic.Name())
    {
        //get latest datagram from mace_data
        MaceCore::TopicDatagram read_topicDatagram = this->getDataObject()->GetCurrentTopicDatagram(m_SensorFootprintDataTopic.Name(), senderID);
        for(size_t i = 0 ; i < componentsUpdated.size() ; i++) {
            if(componentsUpdated.at(i) == DataVehicleSensors::SensorVertices_Global::Name()) {
                std::shared_ptr<DataVehicleSensors::SensorVertices_Global> component = std::make_shared<DataVehicleSensors::SensorVertices_Global>();
                m_SensorFootprintDataTopic.GetComponent(component, read_topicDatagram);

                // Write sensor footprint verticies to the GUI:
                sendSensorFootprint(senderID, component);
            }
        }
    }
}

void ModuleGroundStation::sendVehicleMission(const int &vehicleID, const MissionItem::MissionList &missionList)
{
    QJsonObject json;
    json["dataType"] = "VehicleMission";
    json["vehicleID"] = vehicleID;
    //    json["missionType"] = component->getCommandType();

    QJsonArray missionItems;
    missionListToJSON(missionList,missionItems);
    json["missionItems"] = missionItems;

    QJsonDocument doc(json);
    bool bytesWritten = writeTCPData(doc.toJson());

    if(!bytesWritten){
        std::cout << "Write Vehicle Mission Data failed..." << std::endl;
    }
}

void ModuleGroundStation::sendSensorFootprint(const int &vehicleID, const std::shared_ptr<DataVehicleSensors::SensorVertices_Global> &component) {
    QJsonObject json;
    json["dataType"] = "SensorFootprint";
    json["vehicleID"] = vehicleID;

    std::vector<DataState::StateGlobalPosition> sensorFootprint = component->getSensorVertices();

    QJsonArray verticies;
    for(auto&& vertex : sensorFootprint) {
        QJsonObject obj;
        obj["lat"] = vertex.latitude;
        obj["lon"] = vertex.longitude;
        obj["alt"] = vertex.altitude;

        verticies.push_back(obj);
    }

    json["sensorFootprint"] = verticies;

    QJsonDocument doc(json);
    bool bytesWritten = writeTCPData(doc.toJson());

    if(!bytesWritten){
        std::cout << "Write vehicle sensor footprint failed..." << std::endl;
    }
}

void ModuleGroundStation::sendCurrentMissionItem(const int &vehicleID, const std::shared_ptr<MissionTopic::MissionItemCurrentTopic> &component) {
    QJsonObject json;
    json["dataType"] = "CurrentMissionItem";
    json["vehicleID"] = vehicleID;
    json["missionItemIndex"] = component->getMissionItemIndex();

    QJsonDocument doc(json);
    bool bytesWritten = writeTCPData(doc.toJson());

    if(!bytesWritten){
        std::cout << "Write current mission item failed..." << std::endl;
    }
}

void ModuleGroundStation::sendVehicleHome(const int &vehicleID, const #include "data_generic_command_item/command_item_components.h"
                                          #include "data_generic_command_item_topic/command_item_topic_components.h"
                                          #include "data_generic_mission_item_topic/mission_item_topic_components.h"::SpatialHome &home)
{
    QJsonObject json;
    json["dataType"] = "VehicleHome";
    json["vehicleID"] = vehicleID;
    if(home.getCoordinateFrame() == Data::CoordinateFrameType::CF_GLOBAL_RELATIVE_ALT)
    {
        json["lat"] = home.position.latitude;
        json["lon"] = home.position.longitude;
        json["alt"] = home.position.altitude;
    }
    else {
        // TODO: If we for some reason get a local home position (i.e. x/y/z), set to the global origin.
        //          --May need to check to make sure the global origin is set first though
        json["lat"] = 0;
        json["lon"] = 0;
        json["alt"] = 0;
    }

    QJsonDocument doc(json);
    bool bytesWritten = writeTCPData(doc.toJson());

    if(!bytesWritten){
        std::cout << "Write Home position failed..." << std::endl;
    }
}

void ModuleGroundStation::sendGlobalOrigin(const std::shared_ptr<MissionTopic::MissionHomeTopic> &component)
{
    QJsonObject json;
    json["dataType"] = "GlobalOrigin";
    json["vehicleID"] = 0;

    // TODO-PAT: Update this when we get global origin topic or method

    //    MissionItem::SpatialHome* spatialHome = new MissionItem::SpatialHome(component->getHome());
    //    if(spatialHome->getPositionalFrame() == Data::PositionalFrame::GLOBAL)
    //    {
    //        json["lat"] = spatialHome->position.latitude;
    //        json["lon"] = spatialHome->position.longitude;
    //        json["alt"] = spatialHome->position.altitude;
    //    }
    //    else {
    //        // TODO: If we for some reason get a local home position (i.e. x/y/z), set to the global origin.
    //        //          --May need to check to make sure the global origin is set first though
    //        json["lat"] = 0;
    //        json["lon"] = 0;
    //        json["alt"] = 0;
    //    }

    //    QJsonDocument doc(json);
    //    bool bytesWritten = writeTCPData(doc.toJson());

    //    if(!bytesWritten){
    //        std::cout << "Write Global origin failed..." << std::endl;
    //    }
}


void ModuleGroundStation::sendPositionData(const int &vehicleID, const std::shared_ptr<DataStateTopic::StateGlobalPositionTopic> &component)
{
    QJsonObject json;
    json["dataType"] = "VehiclePosition";
    json["vehicleID"] = vehicleID;
    json["lat"] = component->latitude;
    json["lon"] = component->longitude;
    json["alt"] = component->altitude;
    json["satFix"] = 0; // TODO-PAT: Move to vehicle stats?
    json["numSats"] = 0; // TODO-PAT: Move to vehicle stats?

    QJsonDocument doc(json);
    if(m_positionTimeoutOccured)
    {
        bool bytesWritten = writeTCPData(doc.toJson());

        if(!bytesWritten){
            std::cout << "Write Position Data failed..." << std::endl;
        }

        // Reset timeout:
        m_positionTimeoutOccured = false;
    }
}

void ModuleGroundStation::sendAttitudeData(const int &vehicleID, const std::shared_ptr<DataStateTopic::StateAttitudeTopic> &component)
{
    QJsonObject json;
    json["dataType"] = "VehicleAttitude";
    json["vehicleID"] = vehicleID;
    json["roll"] = component->roll * (180/M_PI);
    json["pitch"] = component->pitch * (180/M_PI);
    json["yaw"] = (component->yaw * (180/M_PI) < 0) ? (component->yaw * (180/M_PI) + 360) : (component->yaw * (180/M_PI));

    QJsonDocument doc(json);
    if(m_attitudeTimeoutOccured)
    {
        bool bytesWritten = writeTCPData(doc.toJson());

        if(!bytesWritten){
            std::cout << "Write Attitude Data failed..." << std::endl;
        }

        // Reset timeout:
        m_attitudeTimeoutOccured = false;
    }
}

void ModuleGroundStation::sendVehicleFuel(const int &vehicleID, const std::shared_ptr<DataGenericItemTopic::DataGenericItemTopic_Battery> &component)
{
    QJsonObject json;
    json["dataType"] = "VehicleFuel";
    json["vehicleID"] = vehicleID;
    json["batteryRemaining"] = component->getBatteryRemaining();
    json["batteryCurrent"] = component->getBatteryCurrent();
    json["batteryVoltage"] = component->getBatteryVoltage();

    QJsonDocument doc(json);
    if(m_fuelTimeoutOccured)
    {
        bool bytesWritten = writeTCPData(doc.toJson());

        if(!bytesWritten){
            std::cout << "Write Fuel Data failed..." << std::endl;
        }

        // Reset timeout:
        m_fuelTimeoutOccured = false;
    }
}

void ModuleGroundStation::sendVehicleMode(const int &vehicleID, const std::shared_ptr<DataGenericItemTopic::DataGenericItemTopic_FlightMode> &component)
{
    QJsonObject json;
    json["dataType"] = "VehicleMode";
    json["vehicleID"] = vehicleID;
    json["vehicleMode"] = QString::fromStdString(component->getFlightModeString());
    //Ken FIX: This is under a different topic now
    json["isArmed"] = false;

    QJsonDocument doc(json);
    if(m_modeTimeoutOccured)
    {
        bool bytesWritten = writeTCPData(doc.toJson());

        if(!bytesWritten){
            std::cout << "Write Vehicle Mode Data failed..." << std::endl;
        }

        // Reset timeout:
        m_modeTimeoutOccured = false;
    }
}

void ModuleGroundStation::sendVehicleText(const int &vehicleID, const std::shared_ptr<DataGenericItemTopic::DataGenericItemTopic_Text> &component)
{
    QJsonObject json;
    json["dataType"] = "VehicleText";
    json["vehicleID"] = vehicleID;
    json["severity"] =  QString::fromStdString(Data::StatusSeverityTypeToString(component->getSeverity()));
    json["text"] = QString::fromStdString(component->getText());

    QJsonDocument doc(json);
    bool bytesWritten = writeTCPData(doc.toJson());

    if(!bytesWritten){
        std::cout << "Write Vehicle Text Data failed..." << std::endl;
    }
}

void ModuleGroundStation::NewlyAvailableCurrentMission(const Data::MissionKey &missionKey)
{
    std::cout<<"New mission available for ground station"<<std::endl;
    MissionItem::MissionList newList;
    bool valid = this->getDataObject()->getMissionList(missionKey,newList);
    if(valid)
        sendVehicleMission(missionKey.m_systemID,newList);
}

void ModuleGroundStation::NewlyAvailableHomePosition(const MissionItem::SpatialHome &home)
{
    sendVehicleHome(home.getVehicleID(), home);
}

void ModuleGroundStation::missionListToJSON(const MissionItem::MissionList &list, QJsonArray &missionItems)
{
    for(int i = 0; i < list.getQueueSize(); i++)
    {
        //TODO-PAT: Look into unique_ptr or auto_ptr?? Not sure I like this...
        std::shared_ptr<MissionItem::AbstractCommandItem> missionItem = list.getMissionItem(i);

        QJsonObject obj;
        obj["description"] = QString::fromStdString(missionItem->getDescription());
        obj["type"] = QString::fromStdString(Data::MissionItemToString(missionItem->getCommandType()));

        switch (missionItem->getCommandType()) {
        case Data::CommandItemType::MI_ACT_ARM:
        {
            std::shared_ptr<MissionItem::ActionArm> castItem = std::dynamic_pointer_cast<MissionItem::ActionArm>(missionItem);
            obj["positionalFrame"] = "global";
            UNUSED(castItem);
            break;
        }
        case Data::CommandItemType::MI_ACT_CHANGEMODE:
        {
            std::shared_ptr<MissionItem::ActionChangeMode> castItem = std::dynamic_pointer_cast<MissionItem::ActionChangeMode>(missionItem);
            obj["positionalFrame"] = "global";
            UNUSED(castItem);
            break;
        }
        case Data::CommandItemType::MI_NAV_LAND:
        {
            if(missionItem->getCoordinateFrame() == Data::CoordinateFrameType::CF_GLOBAL_RELATIVE_ALT)
            {
                std::shared_ptr<MissionItem::SpatialLand<DataState::StateGlobalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialLand<DataState::StateGlobalPosition>>(missionItem);
                obj["positionalFrame"] = "global";
                UNUSED(castItem);
            }else{
                std::shared_ptr<MissionItem::SpatialLand<DataState::StateLocalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialLand<DataState::StateLocalPosition>>(missionItem);
                obj["positionalFrame"] = "local";
                UNUSED(castItem);
            }

            break;
        }
        case Data::CommandItemType::MI_NAV_RETURN_TO_LAUNCH:
        {
            std::shared_ptr<MissionItem::SpatialRTL> castItem = std::dynamic_pointer_cast<MissionItem::SpatialRTL>(missionItem);
            obj["positionalFrame"] = "global";
            UNUSED(castItem);
            break;
        }
        case Data::CommandItemType::MI_NAV_TAKEOFF:
        {
            std::shared_ptr<MissionItem::SpatialTakeoff<DataState::StateGlobalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialTakeoff<DataState::StateGlobalPosition>>(missionItem);
            obj["positionalFrame"] = "global";
            obj["lat"] = castItem->position.latitude;
            obj["lon"] = castItem->position.longitude;
            obj["alt"] = castItem->position.altitude;
            break;
        }
        case Data::CommandItemType::MI_NAV_WAYPOINT:
        {
            if(missionItem->getCoordinateFrame() == Data::CoordinateFrameType::CF_GLOBAL_RELATIVE_ALT)
            {
                std::shared_ptr<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialWaypoint<DataState::StateGlobalPosition>>(missionItem);
                obj["positionalFrame"] = "global";
                obj["lat"] = castItem->position.latitude;
                obj["lon"] = castItem->position.longitude;
                obj["alt"] = castItem->position.altitude;
            }else{
                std::shared_ptr<MissionItem::SpatialWaypoint<DataState::StateLocalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialWaypoint<DataState::StateLocalPosition>>(missionItem);
                obj["positionalFrame"] = "local";
                obj["x"] = castItem->position.x;
                obj["y"] = castItem->position.y;
                obj["z"] = castItem->position.z;
            }
            break;
        }
        case Data::CommandItemType::MI_NAV_LOITER_TIME:
        {
            //This is command number 19
            if(missionItem->getCoordinateFrame() == Data::CoordinateFrameType::CF_GLOBAL_RELATIVE_ALT)
            {
                std::shared_ptr<MissionItem::SpatialLoiter_Time<DataState::StateGlobalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialLoiter_Time<DataState::StateGlobalPosition>>(missionItem);
                obj["positionalFrame"] = "global";
                obj["lat"] = castItem->position.latitude;
                obj["lon"] = castItem->position.longitude;
                obj["alt"] = castItem->position.altitude;
                obj["duration"] = castItem->duration;
                if(castItem->direction == Data::LoiterDirection::CW)
                {
                    obj["radius"] = castItem->radius;
                }else{
                    obj["radius"] = 0-castItem->radius;
                }
            }else{
                std::shared_ptr<MissionItem::SpatialLoiter_Time<DataState::StateLocalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialLoiter_Time<DataState::StateLocalPosition>>(missionItem);
                obj["positionalFrame"] = "local";
                obj["x"] = castItem->position.x;
                obj["y"] = castItem->position.y;
                obj["z"] = castItem->position.z;
                obj["duration"] = castItem->duration;
                if(castItem->direction == Data::LoiterDirection::CW)
                {
                    obj["radius"] = castItem->radius;
                }else{
                    obj["radius"] = 0-castItem->radius;
                }
            }
            break;
        }
        case Data::CommandItemType::MI_NAV_LOITER_TURNS:
        {
            //This is command number 18
            if(missionItem->getCoordinateFrame() == Data::CoordinateFrameType::CF_GLOBAL_RELATIVE_ALT)
            {
                std::shared_ptr<MissionItem::SpatialLoiter_Turns<DataState::StateGlobalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialLoiter_Turns<DataState::StateGlobalPosition>>(missionItem);
                obj["positionalFrame"] = "global";
                obj["lat"] = castItem->position.latitude;
                obj["lon"] = castItem->position.longitude;
                obj["alt"] = castItem->position.altitude;
                obj["turns"] = castItem->turns;
                if(castItem->direction == Data::LoiterDirection::CW)
                {
                    obj["radius"] = castItem->radius;
                }else{
                    obj["radius"] = 0-castItem->radius;
                }
            }else{
                std::shared_ptr<MissionItem::SpatialLoiter_Turns<DataState::StateLocalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialLoiter_Turns<DataState::StateLocalPosition>>(missionItem);
                obj["positionalFrame"] = "local";
                obj["x"] = castItem->position.x;
                obj["y"] = castItem->position.y;
                obj["z"] = castItem->position.z;
                obj["turns"] = castItem->turns;
                if(castItem->direction == Data::LoiterDirection::CW)
                {
                    obj["radius"] = castItem->radius;
                }else{
                    obj["radius"] = 0-castItem->radius;
                }
            }
            break;
        }
        case Data::CommandItemType::MI_NAV_LOITER_UNLIM:
        {
            //This is command number 17
            if(missionItem->getCoordinateFrame() == Data::CoordinateFrameType::CF_GLOBAL_RELATIVE_ALT)
            {
                std::shared_ptr<MissionItem::SpatialLoiter_Unlimited<DataState::StateGlobalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialLoiter_Unlimited<DataState::StateGlobalPosition>>(missionItem);
                obj["positionalFrame"] = "global";
                obj["lat"] = castItem->position.latitude;
                obj["lon"] = castItem->position.longitude;
                obj["alt"] = castItem->position.altitude;
                if(castItem->direction == Data::LoiterDirection::CW)
                {
                    obj["radius"] = castItem->radius;
                }else{
                    obj["radius"] = 0-castItem->radius;
                }
            }else{
                std::shared_ptr<MissionItem::SpatialLoiter_Unlimited<DataState::StateLocalPosition>> castItem = std::dynamic_pointer_cast<MissionItem::SpatialLoiter_Unlimited<DataState::StateLocalPosition>>(missionItem);
                obj["positionalFrame"] = "local";
                obj["x"] = castItem->position.x;
                obj["y"] = castItem->position.y;
                obj["z"] = castItem->position.z;
                if(castItem->direction == Data::LoiterDirection::CW)
                {
                    obj["radius"] = castItem->radius;
                }else{
                    obj["radius"] = 0-castItem->radius;
                }
            }
            break;
        }
        default:
            break;
        }

        missionItems.push_back(obj);
    }
}

void ModuleGroundStation::NewlyAvailableVehicle(const int &vehicleID)
{
    UNUSED(vehicleID);
    // TODO-PAT: Instead of grabbing all vehicles, only send the one thats added to the GUI
    //          -Eventually, handle the removal of a vehicle as well.

    std::shared_ptr<const MaceCore::MaceData> data = this->getDataObject();
    std::vector<int> vehicleIDs;
    data->GetAvailableVehicles(vehicleIDs);

    QJsonArray ids;
    if(vehicleIDs.size() > 0){
        for (const int& i : vehicleIDs) {
            ids.append(i);
        }
    }
    else {
        std::cout << "No vehicles currently available" << std::endl;
    }

    QJsonObject json;
    json["dataType"] = "ConnectedVehicles";
    json["vehicleID"] = 0;
    json["connectedVehicles"] = ids;

    QJsonDocument doc(json);
    bool bytesWritten = writeTCPData(doc.toJson());

    if(!bytesWritten){
        std::cout << "Write New Vehicle Data failed..." << std::endl;
    }
}

bool ModuleGroundStation::writeTCPData(QByteArray data)
{
    //return true;

    std::shared_ptr<QTcpSocket> tcpSocket = std::make_shared<QTcpSocket>();
    tcpSocket->connectToHost(QHostAddress::LocalHost, 1234);
    tcpSocket->waitForConnected();
    if(tcpSocket->state() == QAbstractSocket::ConnectedState)
    {
        tcpSocket->write(data); //write the data itself
        tcpSocket->flush();
        tcpSocket->waitForBytesWritten();
        return true;
    }
    else
    {
        std::cout << "TCP socket not connected" << std::endl;
        tcpSocket->close();
        return false;
    }
}

