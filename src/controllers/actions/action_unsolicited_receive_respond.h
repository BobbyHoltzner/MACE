#ifndef ACTION_UNSOLICITED_RECEIVE_RESPOND_H
#define ACTION_UNSOLICITED_RECEIVE_RESPOND_H

#include "action_base.h"

#include "../base_data_item.h"

namespace Controllers {

//!
//! \brief Action to receive an message type and generates a response to the sender
//!
//! Use of this method requires the caller to set a lambda in setLambda_DataReceived with approriate FINAL_TYPE object.
//! The lambda set will be called when data is received by this method.
//!
//! \template MESSAGE_TYPE Underlaying generic message type that all communication is done through
//! \template COMPONENT_KEY Type that identifies actors on the network
//! \template CONTROLLER_TYPE Type of controller being used by this action, will be used to queue transmissions.
//! \template FINAL_TYPE Type of object that will be sent up.
//! \template MSG_TYPE Type of communications messsage that is to be transmitted out
//! \template ACK_TYPE Data type to respond to sender with.
//! \template MESSAGE_REQUEST_ID Integer code for message that is to kick off this action
//!
template<typename MESSAGE_TYPE, typename COMPONENT_KEY, typename CONTROLLER_TYPE, typename FINAL_TYPE, typename MSG_TYPE, typename ACK_TYPE, const int MESSAGE_REQUEST_ID>
class ActionUnsolicitedReceiveRespond :
        public ActionBase<MESSAGE_TYPE, CONTROLLER_TYPE, MSG_TYPE>
{

    std::function<void(uint8_t, uint8_t, uint8_t, MESSAGE_TYPE*, const ACK_TYPE*)> m_encode_ack_chan;

    typedef ActionBase<MESSAGE_TYPE, CONTROLLER_TYPE, MSG_TYPE> BASE;

protected:

    //!
    //! \brief Method to be implimented that defines how to translate between received message and outgoing data
    //! \param msg Received message
    //! \param sender Module sending message
    //! \param data Data to be generated by message
    //! \return True if message is to be consumed, false if ignored (and possibly consumed by another action)
    //!
    virtual bool Construct_FinalObjectAndResponse(const MSG_TYPE &msg, const COMPONENT_KEY &sender, ACK_TYPE &, COMPONENT_KEY &module_from, std::shared_ptr<FINAL_TYPE> &data)= 0;

public:

    ActionUnsolicitedReceiveRespond(CONTROLLER_TYPE *controller,
                           const std::function<void(const MESSAGE_TYPE*, MSG_TYPE*)> &decode,
        const std::function<void(uint8_t, uint8_t, uint8_t, MESSAGE_TYPE*, const ACK_TYPE*)> &encode_ack_chan) :
        ActionBase<MESSAGE_TYPE, CONTROLLER_TYPE, MSG_TYPE>(controller, [](uint8_t, uint8_t, uint8_t, MESSAGE_TYPE*, const MSG_TYPE*){}, decode),
        m_encode_ack_chan(encode_ack_chan)
    {

        BASE::m_Controller-> template AddTriggeredLogic<MESSAGE_REQUEST_ID, MSG_TYPE>( BASE::m_DecodeFunc,
                [this](const MSG_TYPE  &msg, const COMPONENT_KEY &sender){

                    COMPONENT_KEY target = sender;
                    COMPONENT_KEY module_from;

                    std::shared_ptr<FINAL_TYPE> finalObj;

                    ACK_TYPE ack;
                    bool valid = this-> template Construct_FinalObjectAndResponse(msg, sender, ack, module_from, finalObj);
                    if(valid == true)
                    {
                        ((Controllers::DataItem<COMPONENT_KEY, FINAL_TYPE>*)BASE::m_Controller)->onDataReceived(sender, finalObj);
                        BASE::m_Controller->template EncodeMessage(m_encode_ack_chan, ack, module_from, target);
                    }
                }
        );
    }

protected:
};

}

#endif // ACTION_UNSOLICITED_RECEIVE_RESPOND_H
